// CODE GENERATED BY SMARTYPE, DO NOT MODIFY.
import com.mparticle.smartype.api.Message
import com.mparticle.smartype.api.Serializable
import com.mparticle.smartype.api.SmartypeApiBase
import kotlin.Int
import kotlin.String
import kotlin.js.JsExport
import kotlin.js.JsName
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive

@JsExport
public class AddCustomizationColorDataCustomAttributesColor : Serializable {
  @JsName("value")
  public lateinit var value: String

  public override fun toJson(): String = value

  @JsName("BLUE")
  public fun BLUE(): AddCustomizationColorDataCustomAttributesColor {
    val enumVal = AddCustomizationColorDataCustomAttributesColor()
    enumVal.value = "blue"
    return enumVal
  }

  @JsName("BROWN")
  public fun BROWN(): AddCustomizationColorDataCustomAttributesColor {
    val enumVal = AddCustomizationColorDataCustomAttributesColor()
    enumVal.value = "brown"
    return enumVal
  }

  @JsName("GREEN")
  public fun GREEN(): AddCustomizationColorDataCustomAttributesColor {
    val enumVal = AddCustomizationColorDataCustomAttributesColor()
    enumVal.value = "green"
    return enumVal
  }

  @JsName("LAVENDER")
  public fun LAVENDER(): AddCustomizationColorDataCustomAttributesColor {
    val enumVal = AddCustomizationColorDataCustomAttributesColor()
    enumVal.value = "lavender"
    return enumVal
  }

  @JsName("YELLOW")
  public fun YELLOW(): AddCustomizationColorDataCustomAttributesColor {
    val enumVal = AddCustomizationColorDataCustomAttributesColor()
    enumVal.value = "yellow"
    return enumVal
  }
}

@JsExport
public data class AddCustomizationColorDataCustomAttributes(
  public val color: AddCustomizationColorDataCustomAttributesColor
) : Serializable {
  public override fun toJson(): String {
    var result = "{"
    result += "\"color\":\"" + this.color.toJson() + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

@JsExport
public data class AddCustomizationColorData(
  public val customAttributes: AddCustomizationColorDataCustomAttributes
) : Serializable {
  public val eventName: String = "Add Customization - Color"

  public val customEventType: String = "other"

  public override fun toJson(): String {
    var result = "{"
    result += "\"custom_attributes\":" + this.customAttributes.toJson() + ","
    result += "\"event_name\":\"" + this.eventName + "\","
    result += "\"custom_event_type\":\"" + this.customEventType + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

/**
 * Custom Event with name: "Add Customization - Color"
 */
@JsExport
public data class AddCustomizationColor(
  public val `data`: AddCustomizationColorData?
) : Message() {
  public val eventType: String = "custom_event"

  public override fun toJson(): String {
    var result = "{"
    if (this.data != null) {
        result += "\"data\":" + this.data.toJson() + ","
    }
    result += "\"event_type\":\"" + this.eventType + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

@JsExport
public class AddCustomizationConfigDataCustomAttributesConfig : Serializable {
  @JsName("value")
  public lateinit var value: String

  public override fun toJson(): String = value

  @JsName("TWO_SEATER")
  public fun TWO_SEATER(): AddCustomizationConfigDataCustomAttributesConfig {
    val enumVal = AddCustomizationConfigDataCustomAttributesConfig()
    enumVal.value = "two seater"
    return enumVal
  }

  @JsName("THREE_SEATER")
  public fun THREE_SEATER(): AddCustomizationConfigDataCustomAttributesConfig {
    val enumVal = AddCustomizationConfigDataCustomAttributesConfig()
    enumVal.value = "three seater"
    return enumVal
  }

  @JsName("SECTIONAL")
  public fun SECTIONAL(): AddCustomizationConfigDataCustomAttributesConfig {
    val enumVal = AddCustomizationConfigDataCustomAttributesConfig()
    enumVal.value = "sectional"
    return enumVal
  }
}

@JsExport
public data class AddCustomizationConfigDataCustomAttributes(
  public val config: AddCustomizationConfigDataCustomAttributesConfig
) : Serializable {
  public override fun toJson(): String {
    var result = "{"
    result += "\"config\":\"" + this.config.toJson() + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

@JsExport
public data class AddCustomizationConfigData(
  public val customAttributes: AddCustomizationConfigDataCustomAttributes
) : Serializable {
  public val eventName: String = "Add Customization - Config"

  public val customEventType: String = "other"

  public override fun toJson(): String {
    var result = "{"
    result += "\"custom_attributes\":" + this.customAttributes.toJson() + ","
    result += "\"event_name\":\"" + this.eventName + "\","
    result += "\"custom_event_type\":\"" + this.customEventType + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

/**
 * Custom Event with name: "Add Customization - Config"
 */
@JsExport
public data class AddCustomizationConfig(
  public val `data`: AddCustomizationConfigData?
) : Message() {
  public val eventType: String = "custom_event"

  public override fun toJson(): String {
    var result = "{"
    if (this.data != null) {
        result += "\"data\":" + this.data.toJson() + ","
    }
    result += "\"event_type\":\"" + this.eventType + "\","
    result = result.dropLast(1)
    result += "}"
    return result
  }
}

@JsExport
public class SmartypeApi : SmartypeApiBase() {
  public val dataPlanId: String = "sofa_king_main"

  public val dataPlanVersion: Int = 1

  public fun addCustomizationColor(`data`: AddCustomizationColorData?): AddCustomizationColor {
        return AddCustomizationColor(data)
  }

  public fun addCustomizationConfig(`data`: AddCustomizationConfigData?): AddCustomizationConfig {
        return AddCustomizationConfig(data)
  }
}
